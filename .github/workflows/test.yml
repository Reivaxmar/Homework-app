name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend linting
      working-directory: backend
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run backend tests with pytest
      working-directory: backend
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing -v
      env:
        # Test environment variables (mocked services)
        DATABASE_URL: sqlite:///./test.db
        JWT_SECRET_KEY: test-secret-key-for-testing-only
        GOOGLE_CLIENT_ID: test-google-client-id
        GOOGLE_CLIENT_SECRET: test-google-client-secret
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint
    
    - name: Run frontend tests with vitest
      working-directory: frontend
      run: npm run test:coverage
      env:
        # Test environment variables (mocked services)
        VITE_SUPABASE_URL: https://test-project.supabase.co
        VITE_SUPABASE_ANON_KEY: test-anon-key
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      env:
        VITE_SUPABASE_URL: https://test-project.supabase.co
        VITE_SUPABASE_ANON_KEY: test-anon-key
    
    - name: Start backend server
      working-directory: backend
      run: |
        python run.py &
        sleep 10  # Wait for server to start
      env:
        DATABASE_URL: sqlite:///./test.db
        JWT_SECRET_KEY: test-secret-key-for-testing-only
        GOOGLE_CLIENT_ID: test-google-client-id
        GOOGLE_CLIENT_SECRET: test-google-client-secret
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
    
    - name: Run integration tests
      working-directory: backend
      run: |
        # Test that the server is running
        curl -f http://localhost:8000/health || exit 1
        
        # Run integration tests (if we had any)
        pytest tests/integration/ -v || echo "No integration tests found"
      env:
        DATABASE_URL: sqlite:///./test.db
        JWT_SECRET_KEY: test-secret-key-for-testing-only
        GOOGLE_CLIENT_ID: test-google-client-id
        GOOGLE_CLIENT_SECRET: test-google-client-secret
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_SERVICE_ROLE_KEY: test-service-role-key

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      working-directory: backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ --severity-level medium
    
    - name: Check for known security vulnerabilities
      working-directory: backend
      run: |
        safety check --json || true
        safety check
    
    - name: Run npm audit
      working-directory: frontend
      run: |
        npm audit --audit-level moderate

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Notes" >> $GITHUB_STEP_SUMMARY
        echo "- All external services (Google APIs, Supabase) are mocked in tests" >> $GITHUB_STEP_SUMMARY
        echo "- Tests run against multiple Python and Node.js versions" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports are uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
        echo "- Security scans check for known vulnerabilities" >> $GITHUB_STEP_SUMMARY